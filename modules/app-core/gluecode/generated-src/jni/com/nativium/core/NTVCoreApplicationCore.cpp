// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/nativium/core/NTVCoreApplicationCore.hpp"  // my header
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated {

NTVCoreApplicationCore::NTVCoreApplicationCore() : ::djinni::JniInterface<::nativium::core::ApplicationCore, NTVCoreApplicationCore>("com/nativium/core/ApplicationCore$CppProxy") {}

NTVCoreApplicationCore::~NTVCoreApplicationCore() = default;


CJNIEXPORT void JNICALL Java_com_nativium_core_ApplicationCore_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::nativium::core::ApplicationCore>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_core_ApplicationCore_shared(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::nativium::core::ApplicationCore::shared();
        return ::djinni::release(::djinni_generated::NTVCoreApplicationCore::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jdouble JNICALL Java_com_nativium_core_ApplicationCore_00024CppProxy_native_1multiply(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_value1, jdouble j_value2)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::core::ApplicationCore>(nativeRef);
        auto r = ref->multiply(::djinni::F64::toCpp(jniEnv, j_value1),
                               ::djinni::F64::toCpp(jniEnv, j_value2));
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_nativium_core_ApplicationCore_00024CppProxy_native_1getVersion(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::core::ApplicationCore>(nativeRef);
        auto r = ref->getVersion();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
